/* Merge Sort*/

class Solution {
    public static void divide(int[] nums, int start, int end){
        if(start>=end){
            return;
        }
    int mid=start +(end-start)/2;
        divide(nums,start,mid);
        divide(nums,mid+1,end);
        conq(nums,start,mid,end);
        
        
    }
    public static void conq(int[] nums, int start, int mid, int end){
        int[] merge=new int[end-start+1];
        int idx1=start;
        int idx2=mid+1;
        int x=0;
         while(idx1<=mid && idx2<=end){
            if(nums[idx1]<=nums[idx2]){
                merge[x++]=nums[idx1++];
            }
            else{
                merge[x++]=nums[idx2++];
            }
            
        }
       
            while(idx2<=end){
            merge[x++]=nums[idx2++];
            
        }
        
        
            while(idx1<=mid){
            merge[x++]=nums[idx1++];
            
        }
        
       
        
      for(int i=0, j=start;i<merge.length;i++,j++){
          nums[j]=merge[i];
      }
        
       
        
    }
    public int[] sortArray(int[] nums) {
        
        int n=nums.length;
        divide(nums,0,n-1);
        return nums;
        
    }
}
